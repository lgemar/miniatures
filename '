
template<typename T>
class BinaryTree {
	public: 

	typedef T value_type;

	class Node;
	typedef Node node_type;

	class Node {
		public:

		value_type& value() {
			return bt_->items[idx_];
		}

		value_type& value() const {
			return bt_->items[idx_];
		}

		node_type left() {
			return Node(idx_, left_);
		}

		node_type right() {
			return Node(idx_, right_);
		}

		operator=(node_type b) {
			idx_ = b.idx_;
		}

		operator==(node_type b) {
			return idx_ == b.idx_;
		}

		operator!=(node_type b) {
			return idx_ != b.idx_;
		}

		private:
		Node(BinaryTree* bt, int idx) : bt_(bt), idx_(idx) {
		}
		int idx_;
		int left_;
		int right_;
		friend class BinaryTree;
		BinaryTree* bt_;
	}

	node_type head() {
		return head_;
	}

	private: 
	std::vector<value_type&> items_;
	node_type head_;
}
